    Comandos DDL, DML e DQL

        DDL: Data Definition Language (Linguagem de Definição de Dados)
            Comandos para definir e estruturar o banco de dados:

            CREATE DATABASE: Cria um novo banco de dados.
            CREATE TABLE: Cria uma nova tabela em um banco de dados.
            ALTER TABLE: Modifica a estrutura de uma tabela existente (ex: adicionar ou excluir colunas).
            DROP TABLE: Exclui uma tabela do banco de dados.

        DML: Data Manipulation Language (Linguagem de Manipulação de Dados)
            Comandos para manipular dados no banco:

            INSERT INTO: Insere novos registros em uma tabela.
            UPDATE: Atualiza registros existentes em uma tabela.
            DELETE: Exclui registros de uma tabela com base em condições específicas.
            TRUNCATE: Exclui todos os registros de uma tabela (mantém a estrutura).
            SELECT: Consulta dados de uma tabela ou banco.

        DQL: Data Query Language (Linguagem de Consulta de Dados)
            Comandos para consultar dados do banco:

            SELECT: Recupera dados de uma ou mais tabelas.



    MySQL

    Operações de Comparação:

            = (igual)
            <> ou != (diferente)
            > (maior que)
            < (menor que)
            >= (maior ou igual)
            <= (menor ou igual)
            Operações Lógicas:

            AND, OR, NOT

    Ativar ou Desativar o SAFE UPDATE:
        Desativar:
            SET SQL_SAFE_UPDATES = 0;
        Ativar:
            SET SQL_SAFE_UPDATES = 1;

    USE
            Seleciona o banco de dados ativo para uma sessão de trabalho:

            USE nome_banco;  -- Exemplo: USE cadastro;

    IN e NOT IN

        IN: Verifica se um valor está dentro de um conjunto.   
            SELECT nome FROM clientes WHERE cidade IN ('São Paulo', 'Rio de Janeiro', 'Belo Horizonte');

        NOT IN: Verifica se um valor não está dentro de um conjunto.
            SELECT nome FROM clientes WHERE cidade NOT IN ('São Paulo', 'Rio de Janeiro', 'Belo Horizonte');

    BETWEEN e NOT BETWEEN

        BETWEEN: Verifica se um valor está dentro de um intervalo (inclusive os limites).
            SELECT nome FROM produtos WHERE preco BETWEEN 10 AND 50;

        NOT BETWEEN: Verifica se um valor não está dentro de um intervalo.
            SELECT nome FROM produtos WHERE preco NOT BETWEEN 10 AND 50;

    LIKE e NOT LIKE

        LIKE: Para correspondência de padrões com curingas (% ou _).
            SELECT nome FROM clientes WHERE nome LIKE 'J%';     # A ( % ) ela aceita qualquer caractere depois do J e n tem um limite
            SELECT nome FROM clientes WHERE nome LIKE 'j_';     # A ( _ ) ela aceita qualquer caractere depois do J POREM so pode ter 1 caracter, então cada barrinha dessa indoca 1 caracter na pesquisa

        NOT LIKE: Para negar correspondência de padrões.
            SELECT nome FROM clientes WHERE nome NOT LIKE 'j_';

    IS NULL e IS NOT NULL

        IS NULL: Verifica se o valor é NULL.
            SELECT nome FROM pedidos WHERE data_entrega IS NULL;

        IS NOT NULL: Verifica se o valor não é NULL.
            SELECT nome FROM pedidos WHERE data_entrega IS NOT NULL;

    EXISTS E NOT EXISTS

        EXISTS: Verifica se uma subconsulta retorna pelo menos uma linha.

            SELECT nome 
            FROM clientes C 
            WHERE EXISTS (
                SELECT 1 
                FROM pedidos P 
                WHERE P.cliente_id = C.id
            ); 

            Explicação: Seleciona clientes que têm pelo menos um pedido registrado.

        NOT EXISTS: Verifica se uma subconsulta não retorna nenhuma linha.

            SELECT nome 
            FROM clientes c 
            WHERE NOT EXISTS (
                SELECT 1 
                FROM pedidos p
                WHERE p.cliente_id = c.id
            );
            
            Seleciona clientes que NÃO têm nenhum pedido registrado.

    Comandos SELECT combinados com Funções

        SELECT
            Consultas de dados com operações de comparação, lógica e agrupamento:

        SELECT COUNT(*) FROM cursos;

        SELECT + DISTINCT: 
            Retorna valores únicos de uma coluna.

            SELECT DISTINCT nacionalidade FROM gafanhotos;
            SELECT + COUNT: Conta o número de registros ou valores.

        SELECT + MAX: 
            Retorna o valor máximo de uma coluna.

            SELECT MAX(aulas) FROM cursos WHERE ano = '2024';
        
        SELECT + MIN: 
            Retorna o valor mínimo de uma coluna.

            SELECT MIN(aulas) FROM cursos WHERE ano = '2016';
        
        SELECT + SUM: 
            Soma os valores de uma coluna.

            SELECT SUM(aulas) FROM cursos;

        SELECT + AVG: 
            Calcula a média de valores de uma coluna.

            SELECT AVG(aulas) FROM cursos;

        SELECT + ORDER BY: 
            Ordena os resultados.

            SELECT nome, carga, ano FROM cursos ORDER BY nome;

        SELECT + WHERE: 
            Filtra os resultados com base em condições.

            SELECT nome, carga, ano FROM cursos WHERE ano <= 2018 ORDER BY nome;

        SELECT + IN e NOT IN:
                
            SELECT nome FROM clientes WHERE cidade IN ('São Paulo', 'Rio de Janeiro');
            SELECT nome FROM clientes WHERE cidade NOT IN ('São Paulo', 'Rio de Janeiro');

        SELECT + BETWEEN e NOT BETWEEN:

            SELECT nome, salario FROM funcionarios WHERE salario BETWEEN 3000 AND 8000;
            SELECT nome, salario FROM funcionarios WHERE salario NOT BETWEEN 3000 AND 8000;

        SELECT + LIKE e NOT LIKE:

            SELECT nome FROM clientes WHERE nome LIKE 'Jo%';
            SELECT nome FROM clientes WHERE nome LIKE 'Jo_ão';

            SELECT nome FROM clientes WHERE nome NOT LIKE 'A%';

        SELECT + IS NULL e IS NOT NULL:

            SELECT nome FROM clientes WHERE telefone IS NULL;
            SELECT nome FROM clientes WHERE telefone IS NOT NULL;
    
        SELECT + EXISTS e NOT EXISTS:

            SELECT nome FROM clientes WHERE EXISTS (SELECT * FROM pedidos WHERE clientes.id = pedidos.cliente_id);
            SELECT nome FROM clientes WHERE NOT EXISTS (SELECT * FROM pedidos WHERE clientes.id = pedidos.cliente_id);

    Comandos DML

        INSERT INTO
            Usado para inserir novos registros em uma tabela. As colunas devem ser especificadas, seguidas pelos valores a serem inseridos.

            INSERT INTO nome_da_tabela (coluna1, coluna2, ...) 
            VALUES ('valor1', 'valor2', ...);

        UPDATE
            Atualiza registros existentes em uma tabela com base em uma condição.

            UPDATE nome_da_tabela
            SET coluna1 = valor1, coluna2 = valor2
            WHERE condição;
                
        DELETE
            Exclui registros de uma tabela com base em uma condição.

            DELETE FROM nome_da_tabela
            WHERE condição;

        TRUNCATE
            Exclui todos os registros de uma tabela, mas mantém a estrutura da tabela.

            TRUNCATE TABLE nome_da_tabela;
            Comandos de Modificação de Estrutura de Tabela

        ALTER TABLE
            Permite modificar a estrutura de uma tabela:

            ADD: 
                Adicionar uma nova coluna.

                ALTER TABLE nome_da_tabela ADD nova_coluna tipo_dado;
            
            MODIFY: 
                Modificar a definição de uma coluna.

                ALTER TABLE nome_da_tabela MODIFY coluna tipo_dado;

            CHANGE: 
                Renomear uma coluna ou alterar sua definição.

                ALTER TABLE nome_da_tabela CHANGE nome_antigo nova_coluna tipo_dado;
        
            DROP COLUMN:
                Excluir uma coluna.

                ALTER TABLE nome_da_tabela DROP COLUMN nome_coluna;

            DROP TABLE
                Exclui uma tabela do banco de dados. Cuidado: Este comando é irreversível.

                DROP TABLE nome_da_tabela;

    Comandos DQL 

        DISTINCT 
            Remove valores duplicados em uma coluna ou conjunto de colunas em uma consulta.

            SELECT DISTINCT cidade FROM clientes;

        ORDER BY
            Ordena os resultados de uma consulta em ordem Crescente = ASC (padrão) ou Decrescente = DESC  
                SELECT nome, idade FROM clientes ORDER BY idade DESC;

        GROUP BY e GROUP BY com HAVING

            GROUP BY 
                Agrupa valores identicos em colunas especificas, e muito usado com funções de agregação (como SUM, AVG, COUNT, ect)

                SELECT cidade, COUNT(*) AS total_clientes
                FROM clientes
                GROUP BY cidade;

            GROUP BY + HAVING
                Filtra os grupos do GROUP BY, com base nas condição aplicadas aos resultados das funções de agregação
                
                SELECT cidade, COUNT(*) AS total_clientes
                FROM total_clientes
                GROUP BY cidade
                HAVING COUNT(*) > 5;

                
    Usando MySQL no Terminal (Wanpserver)

        SHOW DATABASES: 
            Mostra os bancos de dados disponíveis.

            SHOW DATABASES;
            SHOW TABLES: Exibe as tabelas dentro do banco de dados selecionado.

        SHOW TABLES;
            DESCRIBE ou DESC: Exibe a estrutura de uma tabela.

            DESCRIBE nome_da_tabela;
            DESC nome_da_tabela;

        SELECT * FROM nome_da_tabela: 
            Exibe todos os dados de uma tabela.

            SELECT * FROM nome_da_tabela;

        SHOW CREATE: 
            Exibe o comando de criação de um banco de dados ou tabela.
            
            SHOW CREATE DATABASE nome_banco;
            SHOW CREATE TABLE nome_tabela;





