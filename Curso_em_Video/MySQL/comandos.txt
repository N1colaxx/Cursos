



Comandos DDL, DML e DQL
    DDL: Data Definition Language (Linguagem de Definição de Dados)

    Comandos para definir e estruturar o banco de dados:
        CREATE DATABASE: Cria um novo banco de dados.
        CREATE TABLE: Cria uma nova tabela em um banco de dados.
        ALTER TABLE: Modifica a estrutura de uma tabela existente (ex: adicionar ou excluir colunas).
        DROP TABLE: Exclui uma tabela do banco de dados.
        DML: Data Manipulation Language (Linguagem de Manipulação de Dados)

    Comandos para manipular dados no banco:
        INSERT INTO: Insere novos registros em uma tabela.
        UPDATE: Atualiza registros existentes em uma tabela.
        DELETE: Exclui registros de uma tabela com base em condições específicas.
        TRUNCATE: Exclui todos os registros de uma tabela (mantém a estrutura).
        SELECT: Consulta dados de uma tabela ou banco.
        DQL: Data Query Language (Linguagem de Consulta de Dados)

    Comandos para consultar dados do banco:
        SELECT: Recupera dados de uma ou mais tabelas.




Comandos MySQL

    Operações de Comparação:
        = (igual)
        <> ou != (diferente)
        > (maior que)
        < (menor que)
        >= (maior ou igual)
        <= (menor ou igual)
        
    Operações Lógicas:
        AND, OR, NOT

    Ativar ou Desativar o SAFE UPDATE:
        Desativar: SET SQL_SAFE_UPDATES = 0;
        Ativar: SET SQL_SAFE_UPDATES = 1;

    Comando USE: Seleciona o banco de dados ativo para uma sessão de trabalho:
        USE nome_banco;

    Operadores de Conjunto:
        IN: Verifica se um valor está dentro de um conjunto.
        Exemplo: SELECT nome FROM clientes WHERE cidade IN ('São Paulo', 'Rio de Janeiro', 'Curitiba');

        NOT IN: Verifica se um valor não está dentro de um conjunto.
        Exemplo: SELECT nome FROM clientes WHERE cidade NOT IN ('São Paulo', 'Rio de Janeiro', 'Curitiba');

    Operadores de Intervalo:
        BETWEEN: Verifica se um valor está dentro de um intervalo (inclusive os limites).
        Exemplo: SELECT nome FROM produtos WHERE preco BETWEEN 10 AND 50;

        NOT BETWEEN: Verifica se um valor não está dentro de um intervalo.
        Exemplo: SELECT nome FROM produtos WHERE preco NOT BETWEEN 10 AND 50;

    Operadores de Padrão:
        LIKE: Para correspondência de padrões com curingas (% ou _).
        Exemplo: SELECT nome FROM clientes WHERE nome LIKE 'J%';

        NOT LIKE: Para negar correspondência de padrões.
        Exemplo: SELECT nome FROM clientes WHERE nome NOT LIKE 'j_';

    Operadores Nulos:
        IS NULL: Verifica se o valor é NULL.
        Exemplo: SELECT nome FROM pedidos WHERE data_entrega IS NULL;

        IS NOT NULL: Verifica se o valor não é NULL.
        Exemplo: SELECT nome FROM pedidos WHERE data_entrega IS NOT NULL;

    Operadores de Subconsultas:
        EXISTS: Verifica se uma subconsulta existe e retorna pelo menos uma linha.
            SELECT nome 
            FROM clientes C 
            WHERE EXISTS (
                SELECT 1 
                FROM pedidos P 
                WHERE P.cliente_id = C.id
            );
                
        NOT EXISTS: Verifica se uma subconsulta não retorna nenhuma linha.
            SELECT nome 
            FROM clientes c 
            WHERE NOT EXISTS (
                SELECT 1 
                FROM pedidos p
                WHERE p.cliente_id = c.id
            );



    Comandos SELECT Combinados com Funções

        SELECT COUNT(*): Conta o número de registros.
            Exemplo: SELECT COUNT(*) FROM cursos;

        SELECT DISTINCT: Retorna valores únicos de uma coluna.
            Exemplo: SELECT DISTINCT nacionalidade FROM gafanhotos;

        SELECT MAX: Retorna o valor máximo de uma coluna.
            Exemplo: SELECT MAX(aulas) FROM cursos WHERE ano = '2024';

        SELECT MIN: Retorna o valor mínimo de uma coluna.
            Exemplo: SELECT MIN(aulas) FROM cursos WHERE ano = '2016';

        SELECT SUM: Soma os valores de uma coluna.
            Exemplo: SELECT SUM(aulas) FROM cursos;

        SELECT AVG: Calcula a média de valores de uma coluna.
            Exemplo: SELECT AVG(aulas) FROM cursos;



    Combinando SELECT com Operadores:
            ORDER BY: Ordena os resultados.
                Exemplo: SELECT nome, carga, ano FROM cursos ORDER BY nome;

            WHERE: Filtra os resultados com base em condições.
                Exemplo: SELECT nome, carga, ano FROM cursos WHERE ano <= 2018 ORDER BY nome;

            IN e NOT IN: Como mencionado anteriormente para selecionar valores dentro ou fora de um conjunto.
        
            BETWEEN e NOT BETWEEN: Para selecionar valores dentro ou fora de um intervalo.

            LIKE e NOT LIKE: Para correspondência ou negação de padrões.
        
            IS NULL e IS NOT NULL: Para verificar se valores são NULL ou não.
            
            EXISTS e NOT EXISTS: Para verificar a existência ou não de uma subconsulta.





Comandos DML: Manipulação de Dados

    INSERT INTO 
    Usado para inserir novos registros em uma tabela:
            INSERT INTO nome_da_tabela (coluna1, coluna2, ...) 
            VALUES ('valor1', 'valor2', ...);


    UPDATE
    Usado para atualizar registros existentes em uma tabela:
        UPDATE nome_da_tabela
        SET coluna1 = valor1, coluna2 = valor2
        WHERE condição;

    SET: Coloca os novos valores para as colunas.
    WHERE: Define a condição para atualizar apenas os registros que atendem a essa condição.


    DELETE
    Exclui registros de uma tabela com base em uma condição:
        DELETE FROM nome_da_tabela
        WHERE condição;


    TRUNCATE
    Exclui todos os registros de uma tabela, mas mantém a estrutura da tabela:
      TRUNCATE TABLE nome_da_tabela;



Comandos de Modificação de Estrutura de Tabela (DDL)

    ALTER TABLE: Permite modificar a estrutura de uma tabela (adicionar, modificar ou excluir colunas).

        ADD: Adicionar uma nova coluna.
            ALTER TABLE nome_da_tabela ADD nova_coluna tipo_dado;

        MODIFY: Modificar a definição de uma coluna existente.
            ALTER TABLE nome_da_tabela MODIFY coluna tipo_dado;
        
        CHANGE: Renomear uma coluna ou alterar sua definição.
            ALTER TABLE nome_da_tabela CHANGE nome_antigo nova_coluna tipo_dado;

        DROP COLUMN: Excluir uma coluna.
            ALTER TABLE nome_da_tabela DROP COLUMN nome_coluna;

        RENAME TO: Renomear a tabela.
            ALTER TABLE nome_da_tabela RENAME TO novo_nome;

        DROP TABLE: Exclui uma tabela do banco de dados. Este comando é irreversível:
            DROP TABLE nome_da_tabela;